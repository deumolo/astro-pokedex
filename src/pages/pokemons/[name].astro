---
import type { GetStaticPaths } from 'astro';
import type { PokemonListResponse } from '@interfaces/pokemon-list.response';
import MainLayout from '@layout/MainLayout.astro';
import PokemonCard from '@components/pokemons/PokemonCard.astro';
import TitleComponent from '@components/shared/TitleComponent.astro';
import { Icon } from 'astro-icon/components';

export const getStaticPaths = (async () => {
  const res = await fetch('https://pokeapi.co/api/v2/pokemon?limit=151');
  const { results } = (await res.json()) as PokemonListResponse;
  return results.map((pokemon) => ({
    params: {
      name: pokemon.name,
    },
    props: {
      name: pokemon.name,
      url: pokemon.url,
    },
  }));
}) satisfies GetStaticPaths;

const { name } = Astro.params;
const { url } = Astro.props;
const id = url.split('/').at(-2);
const audio = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const image = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`;
---

<MainLayout
  title={`Pokemon - #${id} - ${String(name[0]).toUpperCase() + String(name).slice(1)}`}
  description={`Esta pÃ¡gina es la entrada del pokedex de ${String(name[0]).toUpperCase() + String(name).slice(1)}`}
  image={image}
>
  <section
    aria-label='Detalles de pokemon'
    class='mt-10 mx-10 flex flex-col justify-center items-center'
  >
    <div class='flex flex-row justify-center items-center'>
      <div>
        <button onclick='history.back()' class='text-blue-500'>Regresar</button>
        <TitleComponent>
          {name}
        </TitleComponent>
      </div>

      <button class='ml-4' id='btn-favorite' data-name={name} data-id={id}>
        <Icon data-outline name='heart-outline' class='mt-4' size={25} />
        <Icon data-full name='heart-full' class='hidden mt-4' size={25} />
      </button>
    </div>

    <PokemonCard name={name} url={url} isBig />

    <audio controls class='mt-5'>
      <source src={audio} type='audio/ogg' />
      Your browser does not support the audio element.
    </audio>
  </section>
</MainLayout>

<style>
  a {
    @apply hover:underline text-blue-500;
  }

  #btn-favorite {
    @apply hover:animate-pulse;
  }
</style>

<script>
  interface FavoritePokemon {
    name: string;
    id: number;
  }

  const handlePageLoad = () => {
    let favoritePokemons: FavoritePokemon[] = JSON.parse(
      localStorage.getItem('favoritePokemons') ?? '[]'
    );

    const btnFavorite = document.querySelector(
      '#btn-favorite'
    ) as HTMLButtonElement;

    if (btnFavorite) {
      console.log(favoritePokemons);

      const name = btnFavorite.dataset.name ?? '';
      const id = btnFavorite.dataset.id ?? '';
      const heartOutline = btnFavorite.querySelector(
        '[data-outline]'
      ) as HTMLElement;
      const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement;
      const isFavorite = favoritePokemons.some(
        (pokemon) => pokemon.name === name
      );

      if (isFavorite) {
        heartFull.classList.toggle('hidden');
        heartOutline.classList.toggle('hidden');
      }

      const toggleFavorite = () => {
        const isFavorite = favoritePokemons.some(
          (pokemon) => pokemon.name === name
        );

        if (isFavorite) {
          favoritePokemons = favoritePokemons.filter(
            (pokemon) => pokemon.name !== name
          );
        } else {
          favoritePokemons.push({ name, id: Number(id) });
        }

        localStorage.setItem(
          'favoritePokemons',
          JSON.stringify(favoritePokemons)
        );
      };

      btnFavorite.addEventListener('click', () => {
        heartOutline.classList.toggle('hidden');
        heartFull.classList.toggle('hidden');
        toggleFavorite();
      });
    }
  };

  document.addEventListener('astro:page-load', handlePageLoad);
</script>
